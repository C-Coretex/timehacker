// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeHacker.Migrations.Factory;

#nullable disable

namespace TimeHacker.Migrations.Migrations
{
    [DbContext(typeof(MigrationsDbContext))]
    [Migration("20241001191720_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(516)
                        .HasColumnType("nvarchar(516)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ScheduleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleEntityId")
                        .IsUnique()
                        .HasFilter("[ScheduleEntityId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.CategoryDynamicTask", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DynamicTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "DynamicTaskId");

                    b.HasIndex("DynamicTaskId");

                    b.ToTable("CategoryDynamicTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.CategoryFixedTask", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FixedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "FixedTaskId");

                    b.HasIndex("FixedTaskId");

                    b.ToTable("CategoryFixedTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndsOn")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastEntityCreated")
                        .HasColumnType("date");

                    b.Property<byte[]>("RepeatingEntity")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EndsOn");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduleEntity");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleSnapshot", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastUpdateTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "Date");

                    b.HasIndex("Date");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduleSnapshot");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentScheduleEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentScheduleEntity");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("ScheduledCategory");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledTask", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentScheduleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ScheduledCategoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("ParentScheduleEntityId");

                    b.HasIndex("ScheduledCategoryId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("ScheduledTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("UserId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.TagDynamicTask", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TagDynamicTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.TagFixedTask", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TagFixedTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tasks.DynamicTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(516)
                        .HasColumnType("nvarchar(516)");

                    b.Property<TimeSpan>("MaxTimeToFinish")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MinTimeToFinish")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<TimeSpan?>("OptimalTimeToFinish")
                        .HasColumnType("time");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTimestamp");

                    b.HasIndex("UserId");

                    b.ToTable("DynamicTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(516)
                        .HasColumnType("nvarchar(516)");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ScheduleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTimestamp");

                    b.HasIndex("ScheduleEntityId")
                        .IsUnique()
                        .HasFilter("[ScheduleEntityId] IS NOT NULL");

                    b.HasIndex("StartTimestamp");

                    b.HasIndex("UserId");

                    b.ToTable("FixedTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.Category", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", "ScheduleEntity")
                        .WithOne("Category")
                        .HasForeignKey("TimeHacker.Domain.Contracts.Entities.Categories.Category", "ScheduleEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ScheduleEntity");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.CategoryDynamicTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Categories.Category", "Category")
                        .WithMany("CategoryDynamicTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tasks.DynamicTask", "DynamicTask")
                        .WithMany("CategoryDynamicTasks")
                        .HasForeignKey("DynamicTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DynamicTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.CategoryFixedTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Categories.Category", "Category")
                        .WithMany("CategoryFixedTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", "FixedTask")
                        .WithMany("CategoryFixedTasks")
                        .HasForeignKey("FixedTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FixedTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledCategory", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", "ScheduleEntity")
                        .WithMany("ScheduledCategories")
                        .HasForeignKey("ParentScheduleEntity")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleSnapshot", "ScheduleSnapshot")
                        .WithMany("ScheduledCategories")
                        .HasForeignKey("UserId", "Date")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ScheduleEntity");

                    b.Navigation("ScheduleSnapshot");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", "ScheduleEntity")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("ParentScheduleEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledCategory", "ScheduledCategory")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("ScheduledCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleSnapshot", "ScheduleSnapshot")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("UserId", "Date")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ScheduleEntity");

                    b.Navigation("ScheduleSnapshot");

                    b.Navigation("ScheduledCategory");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.TagDynamicTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tags.Tag", "Tag")
                        .WithMany("TagDynamicTasks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tasks.DynamicTask", "Task")
                        .WithMany("TagDynamicTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.TagFixedTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tags.Tag", "Tag")
                        .WithMany("TagFixedTasks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", "Task")
                        .WithMany("TagFixedTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", "ScheduleEntity")
                        .WithOne("FixedTask")
                        .HasForeignKey("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", "ScheduleEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ScheduleEntity");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Categories.Category", b =>
                {
                    b.Navigation("CategoryDynamicTasks");

                    b.Navigation("CategoryFixedTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleEntity", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("FixedTask");

                    b.Navigation("ScheduledCategories");

                    b.Navigation("ScheduledTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduleSnapshot", b =>
                {
                    b.Navigation("ScheduledCategories");

                    b.Navigation("ScheduledTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.ScheduleSnapshots.ScheduledCategory", b =>
                {
                    b.Navigation("ScheduledTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tags.Tag", b =>
                {
                    b.Navigation("TagDynamicTasks");

                    b.Navigation("TagFixedTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tasks.DynamicTask", b =>
                {
                    b.Navigation("CategoryDynamicTasks");

                    b.Navigation("TagDynamicTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Contracts.Entities.Tasks.FixedTask", b =>
                {
                    b.Navigation("CategoryFixedTasks");

                    b.Navigation("TagFixedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
