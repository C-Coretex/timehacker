// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeHacker.Persistence.Context;

#nullable disable

namespace TimeHacker.Persistence.Migrations
{
    [DbContext(typeof(TimeHackerDBContext))]
    [Migration("20240223111417_AddCategoryRelations_ManyToMany")]
    partial class AddCategoryRelations_ManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(516)
                        .HasColumnType("nvarchar(516)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.CategoryDynamicTask", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DynamicTaskId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "DynamicTaskId");

                    b.HasIndex("DynamicTaskId");

                    b.ToTable("CategoryDynamicTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.CategoryFixedTask", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FixedTaskId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "FixedTaskId");

                    b.HasIndex("FixedTaskId");

                    b.ToTable("CategoryFixedTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Tasks.DynamicTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("MaxTimeToFinish")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MinTimeToFinish")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<TimeSpan?>("OptimalTimeToFinish")
                        .HasColumnType("time");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTimestamp");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("UserId");

                    b.ToTable("DynamicTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Tasks.FixedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTimestamp");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("StartTimestamp");

                    b.HasIndex("UserId");

                    b.ToTable("FixedTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.CategoryDynamicTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Models.Persistence.Categories.Category", "Category")
                        .WithMany("CategoryDynamicTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Models.Persistence.Tasks.DynamicTask", "DynamicTask")
                        .WithMany("CategoryDynamicTasks")
                        .HasForeignKey("DynamicTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DynamicTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.CategoryFixedTask", b =>
                {
                    b.HasOne("TimeHacker.Domain.Models.Persistence.Categories.Category", "Category")
                        .WithMany("CategoryFixedTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeHacker.Domain.Models.Persistence.Tasks.FixedTask", "FixedTask")
                        .WithMany("CategoryFixedTasks")
                        .HasForeignKey("FixedTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FixedTask");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Categories.Category", b =>
                {
                    b.Navigation("CategoryDynamicTasks");

                    b.Navigation("CategoryFixedTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Tasks.DynamicTask", b =>
                {
                    b.Navigation("CategoryDynamicTasks");
                });

            modelBuilder.Entity("TimeHacker.Domain.Models.Persistence.Tasks.FixedTask", b =>
                {
                    b.Navigation("CategoryFixedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
